tree -I 'node_modules' > project_structure.txt

tree -I 'node_modules|build' > project_structure.txt



function uploadFileUpdate(req, res) {
    return new Promise((resolve, reject) => {
        upload.single("file")(req, res, (err) => {
            if (err) {
                return reject(err);
            }

            // If no file is found in the request, resolve the promise without error
            if (!req.file) {
                return resolve({ message: 'No file uploaded', fileUploaded: false });
            }

            const fileContent = fs.readFileSync(req.file.path);
            const params = {
                Bucket: process.env.S3_BUCKET_NAME,
                Key: uuid.v4(), // File name you want to save as in S3
                Body: fileContent,
            };

            s3.upload(params, function (err, data) {
                fs.unlinkSync(req.file.path); // Clean up the temporary file
                if (err) {
                    return reject(err);
                }
                resolve({ location: data.Location, fileUploaded: true });
            });
        });
    });
}

module.exports = uploadFile;




const express = require("express");
const multer = require("multer");
const upload = multer({ dest: "uploads/" }); // this saves files to an 'uploads' folder
const s3 = require("../../config/s3");
const uuid = require("uuid");
const fs = require("fs");

function uploadFile(req, res) {
	return new Promise((resolve, reject) => {
		upload.single("file")(req, res, (err) => {
			if (err) {
				reject(err);
			}
			if (!req.file) {
				reject(new Error('No file found'));
			}

			const fileContent = fs.readFileSync(req.file.path);
			const params = {
				Bucket: process.env.S3_BUCKET_NAME,
				Key: uuid.v4(), // File name you want to save as in S3
				Body: fileContent,
			};

			s3.upload(params, function (err, data) {
				fs.unlinkSync(req.file.path);
				if (err) {
					reject(err);
				}
				resolve(data.Location);
			});
		});
	});
}

module.exports = uploadFile;



{user && pet.organizationId === user._id ? (
    <div>
        <Link className="btn btn-yellow" to={`/pets/${pet._id}/update`}>
            Edit Listing
        </Link>
        <Link className="btn btn-red-outline" to={`/pets/${pet._id}/delete`}>
            Remove Listing
        </Link>
    </div>
) : (
    <Link className="btn btn-yellow" to={`/`}>
    Message Organization
    </Link>
)}


} else if (name === 'zipCode') {
    const zipCode = formData.zipCode;
    if (zipCode.length === 5) {
      try {
        const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=${process.env.REACT_APP_GOOGLE_API_KEY}`);
        if (response.data.results[0]) {
          const location = response.data.results[0].geometry.location;
          const address = response.data.results[0].formatted_address;
          setFormData({
            ...formData,
            zipCode: zipCode,
            location: {
              lat: location.lat,
              lng: location.lng,
              address: address
            },
          });
        }